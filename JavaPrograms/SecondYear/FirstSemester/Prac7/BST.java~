//3463541
public class BST
{
	BSTNode root;
	
	public BST ()
	{
		root = null;
	}

	public BST (BSTNode new_root)
	{
		root = new_root;
	}
		
	public BSTNode getRoot()
	{
		return root;
	}

	public void insert(int item)
	{
		if (root == null)
		{
			BSTNode put_me_in = new BSTNode (item, null, null);
			root = put_me_in;
		}
		else if (contains(item))
		{
			System.out.println("\n" + item + " is already in the tree.");
		}
		else
		{	
			BSTNode put_me_in = new BSTNode (item, null, null);
			BSTNode parent = root;
			BSTNode child = new BSTNode ();
			
			while (parent != null)
			{
				if (item > parent.getData())
				{
					child = parent;
					parent = parent.getRight();
				}
				else
				{
					child = parent;
					parent = parent.getLeft();
				}
			}
			
			if (item > child.getData())
			{
				child.setRight(put_me_in);
			}
			else
			{
				child.setLeft(put_me_in);	
			}
		}	
	}
	
	public BSTNode deleteRecursively (BSTNode root, int item)
	{
		if (root == null)
		{
			System.out.println("Node doesn't exist.");
			return null;
		}
		else if (root.getData() == item)
		{
			if (root.getLeft() == null && root.getRight() == null)
				return null;
			else if (root.getLeft() == null)
				return root.getRight();
			else if (root.getRight() == null)
				return root.getLeft();
			else
			{
				BSTNode temp = largestValInLeft(root.getLeft());
				root.setData(temp.getData());
				root.setLeft(deleteRecursively(root.getLeft(), temp.getData()));
				return root;
			}
		}
		else if (item < root.getData())
		{
			root.setLeft(deleteRecursively(root.getLeft(), item));
			return root;
		}
		else if (item > root.getData())
		{
			root.setRight(deleteRecursively(root.getRight(), item));
			return root;
		}
		else
		{
			System.out.println("Node doesn't exist.");
			return null;
		}	
	}

	public BSTNode largestValInLeft(BSTNode root)
	{
		if (root.getRight() == null)
			return root;
		else
			return largestValInLeft(root.getRight());
	}

	/*public void display()
	{
		int power_k = (int)Math.pow(2, height(root));
		String [][] grid = new String [power_k + 1][height(root)];
		
		for (int i = 0; i < height(root); i++)
		{
			int [] available_spots = new int [(int)Math.pow(2, i)];
			
			for (int b = 0; b < available_spots.length; b++)
			{
				available_spots [b] = (power_k / (int)Math.pow(2, i + 1)) + (b * (power_k / (int)Math.pow(2, b)));
			}
				
			for (int p = 0; p < power_k + 1; i++)
			{				
				if (!listContains(available_spots, p))
					grid [p][i] = " ";
				else
					continue;
			}
		}
		
		for (int i = 0; i < height(root) + 1; i++)
		{
			for (int p = 0; p < Math.pow(2, height(root)) + 1; i++)
			{
				System.out.print(grid[p][i]);
			} System.out.println();
		}
	}*/

	public boolean listContains(int [] arr1, int val)
	{
		boolean contains_it = false;
		for (int i = 0; i < arr1.length; i++)
		{
			if (arr1 [i] == val)
			{	
				contains_it = true;
				break;
			}
		} return contains_it;
	}
	public int countNodes(BSTNode root_node)
	{
		if (root_node == null)
			return 0;

		int left_set = countNodes(root_node.getLeft()) + 1;
		int right_set = countNodes(root_node.getRight()) + 0;

		return (left_set + right_set);
	}

	public int countLeaves(BSTNode root_node)
	{
		if (root_node.getLeft() == null && root_node.getRight() == null)
		{
			return 1;
		}
		
		else if (root.getLeft() == null)
		{
			return (countLeaves(root_node.getLeft()) + 0);
		}

		else if (root_node.getRight() == null)
		{
			return (countLeaves(root_node.getLeft()) + 0);
		}

		else
		{
			int left_set = countLeaves(root_node.getLeft()) + 0;
			int right_set = countLeaves(root_node.getLeft()) + 0;
			
			return (left_set + right_set);
		}
	}

	public int countSpecialNodes(BSTNode root_node)
	{
		if (root_node == null)
			return 0;
			
		if (root_node.getLeft() == null && root_node.getRight() == null)
		{
			return 0;
		}
		
		else if (root.getLeft() == null && root_node.getRight() != null)
		{
			return (countLeaves(root_node.getLeft()) + 1);
		}

		else if (root_node.getRight() == null && root.getLeft() != null)
		{
			return (countLeaves(root_node.getLeft()) + 1);
		}

		else
		{
			int left_set = countLeaves(root_node.getLeft()) + 0;
			int right_set = countLeaves(root_node.getLeft()) + 0;
			
			return (left_set + right_set);
		}
	}
	
	public int height(BSTNode root_node)
	{
		if (root_node == null)
		{
			return 0;
		}
		else
		{
			int left_height = 1 + height(root_node.getLeft());
			int right_height = 1 + height(root_node.getRight());
			
			if (left_height > right_height)
				return left_height;
			else
				return right_height;
		}
	}

	public boolean contains (int item)
	{		
		if (root == null)
		{
			return false;
		}
		else if (root.getData() == item)
		{
			return true;
		}
		else
		{
			String true_false = containsHelper(root, "", item);
			if (true_false.contains("T"))
				return true;
			else
				return false;
		}
	}
	
	public String containsHelper (BSTNode root_node, String str, int item)
	{
		BSTNode shifter = root_node;
	
		if (root_node == null)
		{
			return "F";
		}
		else if (root_node.getData() == item)
		{
			return "T";
		}
		else
		{
			if (item > shifter.getData())
				str = str + containsHelper(shifter.getRight(), "", item);
			else
				str = str + containsHelper(shifter.getLeft(), "", item);			
		}
		
		return str;
	}

	public void inOrder(BSTNode root_node)
	{		
		if (root_node.getLeft() != null)
		{
			inOrder(root_node.getLeft());
		}

		System.out.println(root_node.getData());

		if (root_node.getRight() != null)
		{
			inOrder(root_node.getRight());
		}
	}
	
	public void preOrder(BSTNode root_node)
	{
		System.out.println(root_node.getData());
		
		if (root_node.getLeft() != null)
		{
			inOrder(root_node.getLeft());
		}

		if (root_node.getRight() != null)
		{
			inOrder(root_node.getRight());
		}
	}

	public void postOrder(BSTNode root_node)
	{
		if (root_node.getLeft() != null)
		{
			inOrder(root_node.getLeft());
		}

		if (root_node.getRight() != null)
		{
			inOrder(root_node.getRight());
		}

		System.out.println(root_node.getData());

	}
	
	public int findMin()
	{
		if (root == null)
		{
			System.out.println("Empty tree");
			return(-1);
		}
		else
		{
			BSTNode scanner = root;
			while (scanner.getLeft() != null)
			{
				scanner = scanner.getLeft();
			} return (scanner.getData());
		}
	}
	
	public int findMax()
	{
		if (root == null)
		{
			System.out.println("Empty tree");
			return(-1);
		}
		else
		{
			BSTNode scanner = root;
			while (scanner.getRight() != null)
			{
				scanner = scanner.getRight();
			} return (scanner.getData());
		}
	}
}
